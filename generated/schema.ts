// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vault entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vault entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vault", id.toString(), this);
  }

  static load(id: string): Vault | null {
    return store.get("Vault", id) as Vault | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get xTokenAddress(): Bytes | null {
    let value = this.get("xTokenAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set xTokenAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("xTokenAddress");
    } else {
      this.set("xTokenAddress", Value.fromBytes(value as Bytes));
    }
  }

  get assetAddress(): Bytes | null {
    let value = this.get("assetAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set assetAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("assetAddress");
    } else {
      this.set("assetAddress", Value.fromBytes(value as Bytes));
    }
  }

  get redeems(): Array<string> {
    let value = this.get("redeems");
    return value.toStringArray();
  }

  set redeems(value: Array<string>) {
    this.set("redeems", Value.fromStringArray(value));
  }

  get mints(): Array<string> {
    let value = this.get("mints");
    return value.toStringArray();
  }

  set mints(value: Array<string>) {
    this.set("mints", Value.fromStringArray(value));
  }
}

export class MintEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MintEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MintEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MintEntity", id.toString(), this);
  }

  static load(id: string): MintEntity | null {
    return store.get("MintEntity", id) as MintEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get nftIds(): Array<BigInt> | null {
    let value = this.get("nftIds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("nftIds");
    } else {
      this.set("nftIds", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }
}

export class RedeemEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RedeemEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RedeemEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RedeemEntity", id.toString(), this);
  }

  static load(id: string): RedeemEntity | null {
    return store.get("RedeemEntity", id) as RedeemEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get nftIds(): Array<BigInt> | null {
    let value = this.get("nftIds");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIds(value: Array<BigInt> | null) {
    if (value === null) {
      this.unset("nftIds");
    } else {
      this.set("nftIds", Value.fromBigIntArray(value as Array<BigInt>));
    }
  }
}
